# Installation of Dataflow Designer 0.7.0
- name: Install Dataflow Designer 0.7.0
  become: false
  gather_facts: true
  hosts: "{{ groups['installer'][0] }}"
  vars:
    logs_dir: /installers/logs
    env_file: /installers/Dataflow-Designer-0.7.0/installer-ldd/env.properties
    designer_home: /installers/Dataflow-Designer-0.7.0
    designer_archive: dataflow-designer-0.7.0.tgz
    installer_archive: installer-ldd.zip
    foundry_home: /installers/Foundry-Control-Plane-2.2.1/Foundry
        
    ansible_python_interpreter: /usr/bin/python3
    
  tasks:

    # Check for Dataflow Designer directory
    - name: Check if the 'Dataflow Designer' directory exists
      stat:
        path: "{{ designer_home }}"
      register: designer
      tags: 
        - info

    - debug: 
        msg: "Dataflow Designer directory exists: {{ designer.stat.exists }}"
      tags: 
        - info

    # Creates Dataflow Designer install directory - if required
    - name: Creates 'Dataflow Designer' directory
      file:
        path: "{{ designer_home }}"
        state: directory
      when: designer.stat.exists == false
      tags: 
        - info

    # Unarchive Dataflow Designer 0.7.0
    - name: Unarchive {{ designer_archive }}
      unarchive:
        src: "{{ designer_home }}/{{ designer_archive }}"
        dest: "{{ designer_home }}"
        creates: "{{ designer_home }}/dataflow-designer-0.7.0"
      tags: 
        - unpack  

    # Unarchive Dataflow Designer Installer-0.7.0.zip
    - name: Unarchive {{ installer_archive }}
      unarchive:
        src: "{{ designer_home }}/{{ installer_archive }}"
        dest: "{{ designer_home }}"
        creates: "{{ designer_home }}/installer-ldd"
      tags: 
        - unpack

    # Prepare env.properties
    - name: get secret for solution-control-plane-sso-client
      shell: 'kubectl get secrets keycloak-client-secret-solution-control-plane-sso-client -n hitachi-solutions --template=\{\{.data.CLIENT_SECRET\}\} | base64 --decode'
      register: scp_sso_client_secret
      tags: 
        - env

    # Get the 'foundry' password 
    - name: get foundry password
      shell: "kubectl get keycloakusers -n hitachi-solutions keycloak-user -o jsonpath='{.spec.user.credentials[0].value}'"
      register: foundry
      tags: 
        - env
    
    # Replace the variables in env.properties
    - name: Replace variables in {{ env_file }} before install
      shell: | 
        cp {{ env_file }} {{ logs_dir }}/{{ env_file | basename }}.{{ 10000 | random }}.bak
        sed -i 's|^hostname=*$|hostname={{ apiserver_loadbalancer_domain_name }}|1' {{ env_file }}
        sed -i 's|^registry=*$|registry={{ master_node_for_registry }}:{{ master_node_for_registry_port }}|1' {{ env_file }}
        sed -i 's|^foundry_client_secret=*$|foundry_client_secret={{ scp_sso_client_secret.stdout }}|1' {{ env_file }}
        sed -i 's|^username=*$|username=foundry|1' {{ env_file }}
        sed -i 's|^password=*$|password={{ foundry.stdout }}|1' {{ env_file }}
        sed -i 's|^volume_host=*$|volume_host={{ nfs_host }}|1' {{ env_file }}
        sed -i 's|^volume_path=*$|volume_path={{ nfs_path }}|1' {{ env_file }}
      tags: 
        - env

    # Upload Dataflow Designer 0.7.0 solutions to Registry.
    - name: Upload dataflow designer-0.7.0 to Registry
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/upload-solutions.sh -C {{ designer_home }}/dataflow-designer-0.7.0/charts/ -I {{ designer_home }}/dataflow-designer-0.7.0/images/ 
             -k ~/.kube/config -n hitachi-solutions -D true 2>&1 | tee -a {{ logs_dir }}/upload-designer-0.7.0.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: 
        - upload_designer  

    # Install Dataflow Designer 0.7.0
    - name: Install Dataflow Designer 0.7.0
      shell: 
        chdir: "{{ designer_home }}/installer-ldd"
        cmd: "./install.sh 2>&1 | tee -a {{ logs_dir }}/install-designer-0.7.0.log"
      async: 1000
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: 
        - designer

    # Check for Running and Complete Pods
    - name: Confirm Install
      shell: "kubectl get pods -n hitachi-solutions | grep -i -e '[RC][uo][nm][np][il][ne]' | wc -l"
      register: designer_pods
      tags: 
       - designer

    #Check for Non-Running or Failing Pods
    - name: Confirm application status (URL or pods?)
      shell: "kubectl get pods -n hitachi-solutions | grep -iv -e '[RC][uo][nm][np][il][ne]'"
      register: results
      tags: 
        - designer

