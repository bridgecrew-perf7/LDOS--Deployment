## Install Foundry Control Plane
- name: Install Foundry Services
  become: false
  # become_method: sudo
  gather_facts: true
  remote_user: installer
  hosts: "{{ groups['installer'][0] }}"
  vars:
    base_foundry_dir: ~/Downloads/Foundry
    foundry_root: ~/Downloads/Foundry-Control-Plane-2.2.1.tgz
    foundry_home: ~/Downloads/Foundry/Foundry-Control-Plane-2.2.1
    istio_root: ~/Downloads/Foundry/Foundry-Control-Plane-2.2.1/istio/Foundry-Istio-2.2.0.49.tgz
    istio_home: ~/Downloads/Foundry/Foundry-Control-Plane-2.2.1/Foundry-Istio-2.2.0.49
    metrics_root: ~/Downloads/metrics-addon-1.0.0.tgz
    metrics_home: ~/Downloads/Foundry/metrics-addon-1.0.0
    upload_root: ~/Downloads/Foundry-Solution-Upload-2.2.1.tgz
    upload_home: ~/Downloads/Foundry/Foundry-Solution-Upload-2.2.1
    log_dir: /Docker/logs

    ansible_python_interpreter: /usr/bin/python3
    
  tasks:
    # Create a log directory on the 'Docker' volume
    - name: Create Log Directory
      file:
       path: "{{ log_dir }}"
       state: directory
       become: false
      tags: [unpack]

    # Check for Foundry directory
    - name: Check if the directory exists
      stat:
        path: "{{ foundry_home }}"
      register: foundry
      tags: [unpack]

    - name: Foundry Directory located
      debug:
        msg: "Directory {{ foundry_home }} present"
      when: foundry.stat.isdir is defined and foundry.stat.isdir

    # Creates Foundry install directory -if required
    - name: Create Foundry directory
      file:
       path: "{{ foundry_home }}"
       state: directory
       mode: '0755'
       group: installer
       owner: installer
      when: foundry.stat.isdir is not defined
      tags: [unpack]
    
    # Unpacks Foundry Solution Control Plane 
    - name: Unpack Foundry
      unarchive: 
        src: "{{ foundry_root }}"
        dest: "{{ foundry_home }}"
      tags: [unpack] 
    
    # Check for Istio directory
    - name: Check if the directory exists
      stat:
        path: "{{ istio_home }}"
      register: istio
      tags: [unpack]    

    - name: Istio Directory located
      debug:
        msg: "Directory {{ istio_home }} present"
      when: istio.stat.isdir is defined and istio.stat.isdir  

    # Creates Istio install directory -if required
    - name: Create Istio directory
      file:
       path: "{{ istio_home }}"
       state: directory
       mode: '0755'
       group: installer
       owner: installer
      when: istio.stat.isdir is not defined
      tags: [unpack]      

    # Unpacks Istio 
    - name: Unpack Istio
      unarchive: 
        src: "{{ istio_root }}"
        dest: "{{ istio_home }}"
      tags: [unpack]  

    # Foundry requires istio and cert-manager be installed
    - name: Install Cluster Services
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/install-cluster-services.sh -I -r {{ master_node_for_registry }}:{{ master_node_for_registry_port }} -D true 2>&1 | tee -a {{ log_dir }}/install-cluster-services.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: [install_cs]

    # Install Hitachi CRDs
    - name: Run Custom Resource Definitions Script
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/apply-crds.sh -e -r {{ master_node_for_registry }}:{{ master_node_for_registry_port }} --insecure -D true 2>&1 | tee -a {{ log_dir }}/apply-crds.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: [install, install_cs]

    # Install the Soluton Control Plane services
    - name: Install Foundry Control Plane
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/install-control-plane.sh -I -r {{ master_node_for_registry }}:{{ master_node_for_registry_port }} -D true -c https://{{ apiserver_loadbalancer_domain_name }} 2>&1 | tee -a {{ log_dir }}/install-control-plane.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: [install, install_cp]

    # Check for Metrics directory
    - name: Check if Metrics directory exists
      stat:
        path: "{{ metrics_home }}"
      register: metrics
      tags: [unpack]

    - name: Metrics Directory located
      debug:
        msg: "Directory {{ metrics_home }} present"
      when: metrics.stat.isdir is defined and metrics.stat.isdir

    # Unpacks Metrics addon 
    - name: Unpack Metrics
      unarchive: 
        src: "{{ metrics_root }}"
        dest: "{{ base_foundry_dir }}"
      tags: [unpack] 

    - name: Install Metrics Addon
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/apply-crds.sh -r {{ master_node_for_registry }}:{{ master_node_for_registry_port }} -C {{ metrics_home }}/crd-charts/ -k ~/.kube/config --insecure -x -D true 2>&1 | tee -a {{ log_dir }}/install-metrics-add-on.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: [install, metrics]

    - name: Upload Metrics Add-On Solution
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/upload-solutions.sh -C {{metrics_home }}/charts/ -I {{metrics_home }}/images/ -k ~/.kube/config -n hitachi-solutions -D true 2>&1 | tee -a {{ log_dir }}/install-metrics-add-on.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: [install, metrics]

    - name: Confirm Foundry
      shell: "{{ item }}"
      with_items:
        - "kubectl get all -n hitachi-solutions"
      register: foundry_pods
      tags: ['never', 'install_cp', 'info']

    - name: Confirm Foundry User
      shell: "kubectl get keycloakusers -n hitachi-solutions keycloak-user -o jsonpath='{.spec.user.credentials[0].value}'"
      register: foundry_pass
      tags: ['never', 'install_cp', 'info']

    - name: Foundry URLs
      debug:
        msg: 
        - " Installation complete.... "
        - "          Logs can be found in {{ log_dir }}"
        - "          URL: https://{{ apiserver_loadbalancer_domain_name }}/hitachi-solutions/hscp-hitachi-solutions/solution-control-plane/"
        - "          as foundry/{{ foundry_pass.stdout }}"
      tags: ['never', 'install_cp', 'info']